############################   IMPORTS  #############################

import sys
import random

tries = 0
length = 0
maxrounds = 0 


######################   ADDITIONAL FUNCTIONS  ######################

# # Calculates if some of the guessed digits exists in the same position or at least in the random number
def find_digits(user_number, random_number):
	bulls = 0		# matching digit in the correct position
	cows = 0		# matching digit in the wrong position

	random_lst = list(map(int, random_number))
	usr_num_lst = list(map(int, user_number))

	# print(random_lst)
	# print(usr_num_lst)

	for random_lcl_number, user_lcl_number in zip(random_lst, usr_num_lst):		# For that evaluates if some of the user digits is in the same position as the random number
		if random_lcl_number == user_lcl_number:
			bulls += 1

	for random_digit in random_lst:			# For that evaluates if some of the user digits exists in the random number
		if random_digit in usr_num_lst:
			cows += 1
	return bulls, cows-bulls

# # Rutine that evaluates how close the user if from the random number and if he/she guesses Crogats the user.
def evaluate_number(user_number, random_number):
	global tries 
	global maxrounds

	# print ("TRIES: ", tries)
	# print ("MAXROUNDS: ", maxrounds)
	tries += 1
	if random_number == user_number:
		print("Congratulations. You guessed the correct number in " + str(tries) + " tries.")
	else:
		if tries == maxrounds:
			print("Maximum number of tries reached, Sorry!!")
		else:
			bulls_cows = find_digits(user_number, random_number)
			user_number = ask_user_number(False, bulls_cows)
			evaluate_number(user_number, random_number)

# # Rutine to ask the user the number he is guessing. If is the first time shows one message and if not shows another message
# # giving hints on bulls and cows.
# # cows = 0		# matching digit in the wrong position
# # bulls = 0		# matching digit in the correct position

def ask_user_number(first_time, bulls_cows):
	global length
	while True:
	
		if first_time == True:
			user_number = input("Guess a " + str(length) + "-digit number: ")
		else:
			user_number = input("{} bull(s), {} cow(s). Try again:".format(bulls_cows[0], bulls_cows[1]))
		
		try:
			int(user_number)
		except:
			print("Warning: Integer Value Expected")
			continue

		if len(user_number) > int(length) or int(user_number) < 0:
			print("Provide a positive number of length: {}".format(length))
			continue
		else:
			break

	return user_number


# # Rutine to ask user if he/she wants to play again
def ask_user_try_again():
	while True:
		try_again = input("Do you want to try again? Yes/No:  \n")
		if try_again in ('Yes', 'yes'):
			return True
		elif try_again in ('No', 'no'):
			return False
		else:
			print("I did not understand what your answer is!!!")
			continue

	return user_number

# # Rutine to retrieve the random number taking in consideration the length
def gen_random():
	global length
	max_integer = int('9'*int(length))
	random_number = random.randint(0, max_integer)
	return str(random_number)

# # Rutine to retrieve the length that the random number will have
def get_number_length():
	try:
		return int(sys.argv[1])				# # Get the firts argument
	except:
		return 3

# # Rutine to calculate the number of tries that the user have
def max_number_tries():
	global length
	length = get_number_length()
	return ((2**length) + length)

# # Main rutine to ask user if he/she want to paly again
def mimsmind1_rutine():						
	global maxrounds
	global tries

	tries = 0								# Always set to 0 before a game begins

	random_number = gen_random()			# Generates a random number to be guessed
	# print('RANDOM: ', random_number)
	print("Let's play the mimsmind1 game. You have " + str(maxrounds) + " guesses.")
	
	user_number = ask_user_number(True, '')			# Asks the user the number he/she is guessing
	evaluate_number(user_number, random_number)		# Validates if the introduced number is the randomly generated byt the program and gives hints
	return ask_user_try_again()						# Ask the user if he wants to try again. Returns True or False to the main program


##############################   MAIN  ##############################
def main():
	global maxrounds

	flag = True
	maxrounds = max_number_tries()			#Gets number of tries depending on the number in argv or default 3

	while flag == True:
		flag = mimsmind1_rutine()

if __name__ == '__main__':
	main()